{"version":3,"sources":["components/simple.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","App","useState","datas","setDatas","position","zoom","useEffect","fetch","then","response","json","responseJson","console","log","features","catch","error","Map","center","TileLayer","attribution","url","map","data","index","Marker","key","properties","id","geometry","coordinates","Popup","name","address","phone","mask_adult","mask_child","updated","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAa2CA,IAAMC,UCkDlCC,MAhDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAAS,CACvC,KACA,MAJW,mBAENG,EAFM,aAMWH,mBAAS,IANpB,mBAMNI,EANM,KAoBb,OApBa,KAQbC,qBAAU,WACRC,MAAM,8EACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZR,EAASQ,EAAaG,aAEvBC,OAAM,SAACC,GACNJ,QAAQI,MAAMA,QAEjB,IAGD,kBAACC,EAAA,EAAD,CAAKC,OAAQd,EAAUC,KAAMA,GAC3B,kBAACc,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAELnB,EAAMoB,KAAI,SAACC,EAAMC,GAAP,OACT,kBAACC,EAAA,EAAD,CAAQC,IAAKH,EAAKI,WAAWC,GAAIxB,SAAU,CAACmB,EAAKM,SAASC,YAAY,GAAIP,EAAKM,SAASC,YAAY,KAClG,kBAACC,EAAA,EAAD,0BACMR,EAAKI,WAAWK,KADtB,IAC4B,6BAD5B,qBAEMT,EAAKI,WAAWM,QAAQ,6BAF9B,qBAGMV,EAAKI,WAAWO,MAAM,6BAH5B,iCAIQX,EAAKI,WAAWQ,WAAW,6BAJnC,iCAKQZ,EAAKI,WAAWS,WAAW,6BALnC,iCAMQb,EAAKI,WAAWU,QAAQ,kCAIpC,kBAACZ,EAAA,EAAD,CAAQrB,SAAU,CAAC,SAAU,aAC3B,kBAAC2B,EAAA,EAAD,mDACU,6BADV,8FC1CYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,MAAK,SAAA0C,GACjCA,EAAaC,kB","file":"static/js/main.3af32872.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {\n    Circle,\n    CircleMarker,\n    Map,\n    Marker,\n    Polygon,\n    Popup,\n    Rectangle,\n    TileLayer,\n    Tooltip,\n} from 'react-leaflet';\n\nexport default class SimpleExample extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      lat: 23.5, \n      lng: 122,\n      zoom: 8\n    }\n  }\n\n  render() {\n    const position = [this.state.lat, this.state.lng];\n    return (\n      <Map center={position} zoom={this.state.zoom}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={position}>\n          <Popup>\n            A pretty CSS3 popup. <br/> Easily customizable.\n          </Popup>\n        </Marker>\n      </Map>\n    );\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport SimpleExample from './components/simple';\nimport {\n  Circle,\n  CircleMarker,\n  Map,\n  Marker,\n  Polygon,\n  Popup,\n  Rectangle,\n  TileLayer,\n  Tooltip,\n} from 'react-leaflet';\n\nfunction App() {\n  const [datas, setDatas] = useState([]);\n  const [position, setPosition] = useState([\n    23.5,\n    122\n  ]);\n  const [zoom, setZoom] = useState(8);\n\n  useEffect(() => {\n    fetch(\"https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json\")\n      .then((response) => response.json())\n      .then((responseJson) => {\n        console.log(responseJson);\n        setDatas(responseJson.features);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, []);\n\n  return (\n    <Map center={position} zoom={zoom}>\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n      {datas.map((data, index) =>\n        <Marker key={data.properties.id} position={[data.geometry.coordinates[1], data.geometry.coordinates[0]]}>\n          <Popup>\n            名字：{data.properties.name} <br />\n            地址：{data.properties.address}<br />\n            電話：{data.properties.phone}<br />\n            成人口罩：{data.properties.mask_adult}<br />\n            兒童口罩：{data.properties.mask_child}<br />\n            更新時間：{data.properties.updated}<br />\n          </Popup>\n        </Marker>\n      )}\n      <Marker position={[25.02271, 121.528509]}>\n        <Popup>\n          名字：師大藥局 <br />\n          地址：台北市大安區師大路99號1樓\n          </Popup>\n      </Marker>\n    </Map>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}