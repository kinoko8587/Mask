{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","App","classes","useState","datas","setDatas","position","setPosition","zoom","useEffect","fetch","then","response","json","responseJson","console","log","features","catch","error","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","setGeo","className","Grid","container","item","xs","Brightness1","style","target","href","Map","center","TileLayer","attribution","url","Marker","Popup","map","data","index","CircleMarker","key","properties","id","num","mask_adult","radius","geometry","coordinates","name","Chip","icon","label","mask_child","address","phone","note","updated","available","includes","Button","variant","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"iWAqBMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,eA2JfC,MAvJf,WACE,IAAMC,EAAUd,IADH,EAEae,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGmBF,mBAAS,CACvC,KACA,MALW,mBAGNG,EAHM,KAGIC,EAHJ,OAOWJ,mBAAS,IAPpB,mBAONK,EAPM,KAkDb,OAlDa,KASbC,qBAAU,WACRC,MAAM,8EACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZT,EAASS,EAAaG,aAEvBC,OAAM,SAACC,GACNJ,QAAQI,MAAMA,MAEdC,UAAUC,aACZD,UAAUC,YAAYC,oBAAmB,SAAUhB,IAIvD,SAAgBA,GACdS,QAAQC,IAAIV,GACZC,EAAY,CAACD,EAASiB,OAAOC,SACzBlB,EAASiB,OAAOE,YAP6CC,CAAOpB,QAEvE,IA6BD,yBAAKqB,UAAWzB,EAAQX,MACtB,kBAACqC,EAAA,EAAD,CAAMC,WAAS,EAAClC,QAAS,GACvB,kBAACiC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IAAf,wCACS,kBAACC,EAAA,EAAD,CAAaC,MAAO,CAAEpC,MAAO,WADtC,QAEe,kBAACmC,EAAA,EAAD,CAAaC,MAAO,CAAEpC,MAAO,YAF5C,SAGe,kBAACmC,EAAA,EAAD,CAAaC,MAAO,CAAEpC,MAAO,YAH5C,QAIe,kBAACmC,EAAA,EAAD,CAAaC,MAAO,CAAEpC,MAAO,SAJ5C,MAMA,kBAAC+B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACf,uBAAGG,OAAO,SAASC,KAAK,2BAAxB,wBAGF,kBAACP,EAAA,EAAD,CAAMC,WAAS,EAAClC,QAAS,GASvB,kBAACiC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,kBAACK,EAAA,EAAD,CAAKC,OAAQ/B,EAAUE,KAAMA,GAC3B,kBAAC8B,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,kBAACC,EAAA,EAAD,CAAQnC,SAAUA,GAChB,kBAACoC,EAAA,EAAD,kCAEDtC,EAAMuC,KAAI,SAACC,EAAMC,GAAP,OACT,kBAACC,EAAA,EAAD,CAAcC,IAAKH,EAAKI,WAAWC,GAAIpD,OA5CjCqD,EA4CiDN,EAAKI,WAAWG,WA3CtE,GAAPD,EACK,MACEA,EAAM,GACR,SACEA,EAAM,GACR,SAEA,SAoCqFE,OAAQ,GAAIf,OAAQ,CAACO,EAAKS,SAASC,YAAY,GAAIV,EAAKS,SAASC,YAAY,KAC/J,kBAACZ,EAAA,EAAD,KACE,4BAAKE,EAAKI,WAAWO,MACrB,kBAACC,EAAA,EAAD,CACEC,KAAM,kBAAC,IAAD,MACNC,MAAOd,EAAKI,WAAWG,WACvBtD,MAAM,YAER,kBAAC2D,EAAA,EAAD,CACEC,KAAM,kBAAC,IAAD,MACNC,MAAOd,EAAKI,WAAWW,WACvB9D,MAAM,YAVV,IAWK,6BAXL,iCAYQ+C,EAAKI,WAAWG,WAAW,6BAZnC,iCAaQP,EAAKI,WAAWW,WAAW,6BAbnC,qBAcMf,EAAKI,WAAWY,QAAQ,6BAd9B,qBAeMhB,EAAKI,WAAWa,MAAM,6BAf5B,qBAgBMjB,EAAKI,WAAWc,KAAK,6BAhB3B,iCAiBQlB,EAAKI,WAAWe,QAAQ,6BAjBhC,2BAmBE,+BACE,+BACE,4BACE,4CACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,wCAGJ,+BACE,4BACE,4CACA,4BAAKnB,EAAKI,WAAWgB,UAAUC,SAAS,8CAAa,IAAM,KAC3D,4BAAKrB,EAAKI,WAAWgB,UAAUC,SAAS,8CAAa,IAAM,KAC3D,4BAAKrB,EAAKI,WAAWgB,UAAUC,SAAS,8CAAa,IAAM,KAC3D,4BAAKrB,EAAKI,WAAWgB,UAAUC,SAAS,8CAAa,IAAM,KAC3D,4BAAKrB,EAAKI,WAAWgB,UAAUC,SAAS,8CAAa,IAAM,KAC3D,4BAAKrB,EAAKI,WAAWgB,UAAUC,SAAS,8CAAa,IAAM,KAC3D,4BAAKrB,EAAKI,WAAWgB,UAAUC,SAAS,8CAAa,IAAM,MAE7D,4BACE,4CACA,4BAAKrB,EAAKI,WAAWgB,UAAUC,SAAS,8CAAa,IAAM,KAC3D,4BAAKrB,EAAKI,WAAWgB,UAAUC,SAAS,8CAAa,IAAM,KAC3D,4BAAKrB,EAAKI,WAAWgB,UAAUC,SAAS,8CAAa,IAAM,KAC3D,4BAAKrB,EAAKI,WAAWgB,UAAUC,SAAS,8CAAa,IAAM,KAC3D,4BAAKrB,EAAKI,WAAWgB,UAAUC,SAAS,8CAAa,IAAM,KAC3D,4BAAKrB,EAAKI,WAAWgB,UAAUC,SAAS,8CAAa,IAAM,KAC3D,4BAAKrB,EAAKI,WAAWgB,UAAUC,SAAS,8CAAa,IAAM,QAIjE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYtE,MAAM,UAAUqC,OAAO,SAASC,KAAM,wCAA0CS,EAAKI,WAAWO,MAA5H,qBApGhB,IAAkBL,UC1DAkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBxD,WACrBA,UAAUyD,cAAcC,MAAMnE,MAAK,SAAAoE,GACjCA,EAAaC,kB","file":"static/js/main.4fd5dfb2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport {\n  CircleMarker,\n  Map,\n  Popup,\n  TileLayer,\n  Marker\n} from 'react-leaflet';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Select, { components } from 'react-select';\nimport Chip from '@material-ui/core/Chip';\nimport FaceIcon from '@material-ui/icons/Face';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport { AccessAlarm, ThreeDRotation, Brightness1 } from '@material-ui/icons';\nimport Button from '@material-ui/core/Button';\nimport Alert from '@material-ui/lab/Alert';\nimport Card from '@material-ui/core/Card';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [datas, setDatas] = useState([]);\n  const [position, setPosition] = useState([\n    23.5,\n    122\n  ]);\n  const [zoom, setZoom] = useState(15);\n\n  useEffect(() => {\n    fetch(\"https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json\")\n      .then((response) => response.json())\n      .then((responseJson) => {\n        console.log(responseJson);\n        setDatas(responseJson.features);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(function (position) { setGeo(position) });\n    }\n  }, []);\n\n  function setGeo(position) {\n    console.log(position);\n    setPosition([position.coords.latitude\n      , position.coords.longitude\n    ]);\n  }\n\n  function handleChange(selectedOption) {\n    // this.setState(\n    //   { selectedOption },\n    //   () => console.log(`Option selected:`, this.state.selectedOption)\n    // );\n  };\n\n  function getColor(num) {\n    if (num == 0) {\n      return \"red\";\n    } else if (num < 20) {\n      return \"orange\";\n    } else if (num < 50) {\n      return \"yellow\";\n    } else {\n      return \"green\"\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={11} >\n          口罩數量顏色 <Brightness1 style={{ color: \"green\" }}></Brightness1> > 50\n                       <Brightness1 style={{ color: \"yellow\" }}></Brightness1> 20~49\n                       <Brightness1 style={{ color: \"orange\" }}></Brightness1> 1~19\n                       <Brightness1 style={{ color: \"red\" }}></Brightness1> 0\n        </Grid>\n        <Grid item xs={1}>\n        <a target=\"_blank\" href=\"https://www.nhi.gov.tw/\">健保局</a>\n        </Grid>\n      </Grid>\n      <Grid container spacing={3}>\n        {/* <Grid item xs={3}>\n          <div> <Select\n            // value={selectedOption}\n            onChange={handleChange}\n            options={datas}\n\n          /></div>\n        </Grid> */}\n        <Grid item xs={12} >\n          <Map center={position} zoom={zoom}>\n            <TileLayer\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <Marker position={position}>\n              <Popup>你的位置</Popup>\n            </Marker>\n            {datas.map((data, index) =>\n              <CircleMarker key={data.properties.id} color={getColor(data.properties.mask_adult)} radius={10} center={[data.geometry.coordinates[1], data.geometry.coordinates[0]]}>\n                <Popup>\n                  <h3>{data.properties.name}</h3>\n                  <Chip\n                    icon={<AccountCircle />}\n                    label={data.properties.mask_adult}\n                    color=\"primary\"\n                  />\n                  <Chip\n                    icon={<FaceIcon />}\n                    label={data.properties.mask_child}\n                    color=\"primary\"\n                  /> <br />\n                  成人口罩：{data.properties.mask_adult}<br />\n                  兒童口罩：{data.properties.mask_child}<br />\n                  地址：{data.properties.address}<br />\n                  電話：{data.properties.phone}<br />\n                  備註：{data.properties.note}<br />\n                  更新時間：{data.properties.updated}<br />\n                  營業時間\n                  <table>\n                    <thead>\n                      <tr>\n                        <th>時間</th>\n                        <th>一</th>\n                        <th>二</th>\n                        <th>三</th>\n                        <th>四</th>\n                        <th>五</th>\n                        <th>六</th>\n                        <th>日</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td>上午</td>\n                        <td>{data.properties.available.includes(\"星期一上午看診\") ? \"O\" : \"X\"}</td>\n                        <td>{data.properties.available.includes(\"星期二上午看診\") ? \"O\" : \"X\"}</td>\n                        <td>{data.properties.available.includes(\"星期三上午看診\") ? \"O\" : \"X\"}</td>\n                        <td>{data.properties.available.includes(\"星期四上午看診\") ? \"O\" : \"X\"}</td>\n                        <td>{data.properties.available.includes(\"星期五上午看診\") ? \"O\" : \"X\"}</td>\n                        <td>{data.properties.available.includes(\"星期六上午看診\") ? \"O\" : \"X\"}</td>\n                        <td>{data.properties.available.includes(\"星期日上午看診\") ? \"O\" : \"X\"}</td>\n                      </tr>\n                      <tr>\n                        <td>下午</td>\n                        <td>{data.properties.available.includes(\"星期一下午看診\") ? \"O\" : \"X\"}</td>\n                        <td>{data.properties.available.includes(\"星期二下午看診\") ? \"O\" : \"X\"}</td>\n                        <td>{data.properties.available.includes(\"星期三下午看診\") ? \"O\" : \"X\"}</td>\n                        <td>{data.properties.available.includes(\"星期四下午看診\") ? \"O\" : \"X\"}</td>\n                        <td>{data.properties.available.includes(\"星期五下午看診\") ? \"O\" : \"X\"}</td>\n                        <td>{data.properties.available.includes(\"星期六下午看診\") ? \"O\" : \"X\"}</td>\n                        <td>{data.properties.available.includes(\"星期日下午看診\") ? \"O\" : \"X\"}</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                  <Button variant=\"contained\" color=\"primary\" target=\"_blank\" href={\"https://www.google.com.tw/maps/place/\" + data.properties.name}>\n                    GO!前往\n                </Button>\n                </Popup>\n              </CircleMarker>\n            )}\n          </Map>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}